// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	environment "github.com/slausonio/siows"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// Env provides a mock function with given fields:
func (_m *Server) Env() environment.Env {
	ret := _m.Called()

	var r0 environment.Env
	if rf, ok := ret.Get(0).(func() environment.Env); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(environment.Env)
		}
	}

	return r0
}

// Server provides a mock function with given fields:
func (_m *Server) Server() *http.Server {
	ret := _m.Called()

	var r0 *http.Server
	if rf, ok := ret.Get(0).(func() *http.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Server)
		}
	}

	return r0
}

// Start provides a mock function with given fields: handler
func (_m *Server) Start(handler http.Handler) {
	_m.Called(handler)
}

type mockConstructorTestingTNewServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewServer creates a new instance of Server. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServer(t mockConstructorTestingTNewServer) *Server {
	mock := &Server{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
